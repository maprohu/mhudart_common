// generated proto_visitors.g.dart
// generated by file:///C:/Users/mapro/development/flutterdev/mocap_repo/mhudart_generator/scripts/generate_proto_visitors.dart
part of 'proto_visitors.dart';
abstract class CardinalityVisitor<R> implements MapOfVisitor<R>, RepeatedVisitor<R>, SingleVisitor<R>, OneOfVisitor<R> {
}
abstract class MapOfVisitor<R> {
  R mapOf(MapOf mapOf);
}
abstract class NonMapVisitor<R> implements RepeatedVisitor<R>, SingleVisitor<R>, OneOfVisitor<R> {
}
abstract class RepeatedVisitor<R> {
  R repeated(Repeated repeated);
}
abstract class SingleVisitor<R> {
  R single(Single single);
}
abstract class OneOfVisitor<R> {
  R oneOf(OneOf oneOf);
}
abstract class CardinalityVisitee {
  R acceptCardinality<R>(CardinalityVisitor<R> visitor);
}
class CardinalityVisitorImpl<R> implements CardinalityVisitor<R> {
  final R Function(MapOf mapOf) _mapOf;
  final R Function(Repeated repeated) _repeated;
  final R Function(Single single) _single;
  final R Function(OneOf oneOf) _oneOf;
  const CardinalityVisitorImpl({
    required R Function(MapOf mapOf) mapOf,
    required R Function(Repeated repeated) repeated,
    required R Function(Single single) single,
    required R Function(OneOf oneOf) oneOf,
  }) : _mapOf = mapOf, _repeated = repeated, _single = single, _oneOf = oneOf;
  @override
  R mapOf(MapOf mapOf) => _mapOf(mapOf);
  @override
  R repeated(Repeated repeated) => _repeated(repeated);
  @override
  R single(Single single) => _single(single);
  @override
  R oneOf(OneOf oneOf) => _oneOf(oneOf);
  factory CardinalityVisitorImpl.withDefault({
    R Function(Cardinality cardinality)? cardinality,
    R Function(MapOf mapOf)? mapOf,
    R Function(NonMap nonMap)? nonMap,
    R Function(Repeated repeated)? repeated,
    R Function(Single single)? single,
    R Function(OneOf oneOf)? oneOf,
  }) => CardinalityVisitorImpl(
    mapOf: mapOf ?? cardinality ?? Functions.throws1,
    repeated: repeated ?? nonMap ?? cardinality ?? Functions.throws1,
    single: single ?? nonMap ?? cardinality ?? Functions.throws1,
    oneOf: oneOf ?? nonMap ?? cardinality ?? Functions.throws1,
  );
}
extension CardinalityVisiteeX on CardinalityVisitee {
  R onCardinality<R>({
    required R Function(MapOf mapOf) mapOf,
    required R Function(Repeated repeated) repeated,
    required R Function(Single single) single,
    required R Function(OneOf oneOf) oneOf,
  }) => acceptCardinality(CardinalityVisitorImpl(mapOf: mapOf,repeated: repeated,single: single,oneOf: oneOf,));
  R onCardinalityOr<R>({
    R Function(Cardinality cardinality)? cardinality,
    R Function(MapOf mapOf)? mapOf,
    R Function(NonMap nonMap)? nonMap,
    R Function(Repeated repeated)? repeated,
    R Function(Single single)? single,
    R Function(OneOf oneOf)? oneOf,
  }) => acceptCardinality(CardinalityVisitorImpl.withDefault(cardinality: cardinality,mapOf: mapOf,nonMap: nonMap,repeated: repeated,single: single,oneOf: oneOf,));
}
abstract class CardinalityVisiteeMapOf implements CardinalityVisitee, Self<MapOf> {
  R acceptCardinality<R>(CardinalityVisitor<R> visitor) => visitor.mapOf(self);
}
abstract class CardinalityVisiteeRepeated implements CardinalityVisitee, Self<Repeated> {
  R acceptCardinality<R>(CardinalityVisitor<R> visitor) => visitor.repeated(self);
}
abstract class CardinalityVisiteeSingle implements CardinalityVisitee, Self<Single> {
  R acceptCardinality<R>(CardinalityVisitor<R> visitor) => visitor.single(self);
}
abstract class CardinalityVisiteeOneOf implements CardinalityVisitee, Self<OneOf> {
  R acceptCardinality<R>(CardinalityVisitor<R> visitor) => visitor.oneOf(self);
}
abstract class ValueTypeVisitor<R> implements BoolTypeVisitor<R>, StringTypeVisitor<R>, EnumTypeVisitor<R>, MessageTypeVisitor<R>, IntTypeVisitor<R> {
}
abstract class BoolTypeVisitor<R> {
  R boolType(BoolType boolType);
}
abstract class StringTypeVisitor<R> {
  R stringType(StringType stringType);
}
abstract class EnumTypeVisitor<R> {
  R enumType(EnumType enumType);
}
abstract class MessageTypeVisitor<R> {
  R messageType(MessageType messageType);
}
abstract class IntTypeVisitor<R> {
  R intType(IntType intType);
}
abstract class ValueTypeVisitee {
  R acceptValueType<R>(ValueTypeVisitor<R> visitor);
}
class ValueTypeVisitorImpl<R> implements ValueTypeVisitor<R> {
  final R Function(BoolType boolType) _boolType;
  final R Function(StringType stringType) _stringType;
  final R Function(EnumType enumType) _enumType;
  final R Function(MessageType messageType) _messageType;
  final R Function(IntType intType) _intType;
  const ValueTypeVisitorImpl({
    required R Function(BoolType boolType) boolType,
    required R Function(StringType stringType) stringType,
    required R Function(EnumType enumType) enumType,
    required R Function(MessageType messageType) messageType,
    required R Function(IntType intType) intType,
  }) : _boolType = boolType, _stringType = stringType, _enumType = enumType, _messageType = messageType, _intType = intType;
  @override
  R boolType(BoolType boolType) => _boolType(boolType);
  @override
  R stringType(StringType stringType) => _stringType(stringType);
  @override
  R enumType(EnumType enumType) => _enumType(enumType);
  @override
  R messageType(MessageType messageType) => _messageType(messageType);
  @override
  R intType(IntType intType) => _intType(intType);
  factory ValueTypeVisitorImpl.withDefault({
    R Function(ValueType valueType)? valueType,
    R Function(BoolType boolType)? boolType,
    R Function(StringType stringType)? stringType,
    R Function(EnumType enumType)? enumType,
    R Function(MessageType messageType)? messageType,
    R Function(IntType intType)? intType,
  }) => ValueTypeVisitorImpl(
    boolType: boolType ?? valueType ?? Functions.throws1,
    stringType: stringType ?? valueType ?? Functions.throws1,
    enumType: enumType ?? valueType ?? Functions.throws1,
    messageType: messageType ?? valueType ?? Functions.throws1,
    intType: intType ?? valueType ?? Functions.throws1,
  );
}
extension ValueTypeVisiteeX on ValueTypeVisitee {
  R onValueType<R>({
    required R Function(BoolType boolType) boolType,
    required R Function(StringType stringType) stringType,
    required R Function(EnumType enumType) enumType,
    required R Function(MessageType messageType) messageType,
    required R Function(IntType intType) intType,
  }) => acceptValueType(ValueTypeVisitorImpl(boolType: boolType,stringType: stringType,enumType: enumType,messageType: messageType,intType: intType,));
  R onValueTypeOr<R>({
    R Function(ValueType valueType)? valueType,
    R Function(BoolType boolType)? boolType,
    R Function(StringType stringType)? stringType,
    R Function(EnumType enumType)? enumType,
    R Function(MessageType messageType)? messageType,
    R Function(IntType intType)? intType,
  }) => acceptValueType(ValueTypeVisitorImpl.withDefault(valueType: valueType,boolType: boolType,stringType: stringType,enumType: enumType,messageType: messageType,intType: intType,));
}
abstract class ValueTypeVisiteeBoolType implements ValueTypeVisitee, Self<BoolType> {
  R acceptValueType<R>(ValueTypeVisitor<R> visitor) => visitor.boolType(self);
}
abstract class ValueTypeVisiteeStringType implements ValueTypeVisitee, Self<StringType> {
  R acceptValueType<R>(ValueTypeVisitor<R> visitor) => visitor.stringType(self);
}
abstract class ValueTypeVisiteeEnumType implements ValueTypeVisitee, Self<EnumType> {
  R acceptValueType<R>(ValueTypeVisitor<R> visitor) => visitor.enumType(self);
}
abstract class ValueTypeVisiteeMessageType implements ValueTypeVisitee, Self<MessageType> {
  R acceptValueType<R>(ValueTypeVisitor<R> visitor) => visitor.messageType(self);
}
abstract class ValueTypeVisiteeIntType implements ValueTypeVisitee, Self<IntType> {
  R acceptValueType<R>(ValueTypeVisitor<R> visitor) => visitor.intType(self);
}