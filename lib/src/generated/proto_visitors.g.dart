// generated proto_visitors.g.dart
// generated by file:///C:/Users/mapro/development/flutterdev/mocap_repo/mhudart_generator/scripts/generate_proto_visitors.dart
part of 'proto_visitors.dart';
abstract class BuilderMapFieldInfoVisitor<R, T> {
  R builderMapFieldInfo(BuilderMapFieldInfo<T> builderMapFieldInfo);
}
abstract class RepeatedFieldInfoVisitor<R, T> {
  R repeatedFieldInfo(RepeatedFieldInfo<T> repeatedFieldInfo);
}
abstract class SingleFieldInfoVisitor<R, T> {
  R singleFieldInfo(SingleFieldInfo<T> singleFieldInfo);
}
abstract class OneOfFieldInfoVisitor<R, T> {
  R oneOfFieldInfo(OneOfFieldInfo<T> oneOfFieldInfo);
}
abstract class CardinalityVisitor<R, T> implements BuilderMapFieldInfoVisitor<R, T>, RepeatedFieldInfoVisitor<R, T>, SingleFieldInfoVisitor<R, T>, OneOfFieldInfoVisitor<R, T> {}
abstract class CardinalityVisitee<T> {
  R acceptCardinality<R>(CardinalityVisitor<R, T> visitor);
}
class CardinalityVisitorImpl<R, T> implements CardinalityVisitor<R, T> {
  final R Function(BuilderMapFieldInfo<T> builderMapFieldInfo) _builderMapFieldInfo;
  final R Function(RepeatedFieldInfo<T> repeatedFieldInfo) _repeatedFieldInfo;
  final R Function(SingleFieldInfo<T> singleFieldInfo) _singleFieldInfo;
  final R Function(OneOfFieldInfo<T> oneOfFieldInfo) _oneOfFieldInfo;
  const CardinalityVisitorImpl({
    required R Function(BuilderMapFieldInfo<T> map) map,
    required R Function(RepeatedFieldInfo<T> repeated) repeated,
    required R Function(SingleFieldInfo<T> single) single,
    required R Function(OneOfFieldInfo<T> oneof) oneof,
  }) : _builderMapFieldInfo = map, _repeatedFieldInfo = repeated, _singleFieldInfo = single, _oneOfFieldInfo = oneof;
  @override
  R builderMapFieldInfo(BuilderMapFieldInfo<T> builderMapFieldInfo) => _builderMapFieldInfo(builderMapFieldInfo);
  @override
  R repeatedFieldInfo(RepeatedFieldInfo<T> repeatedFieldInfo) => _repeatedFieldInfo(repeatedFieldInfo);
  @override
  R singleFieldInfo(SingleFieldInfo<T> singleFieldInfo) => _singleFieldInfo(singleFieldInfo);
  @override
  R oneOfFieldInfo(OneOfFieldInfo<T> oneOfFieldInfo) => _oneOfFieldInfo(oneOfFieldInfo);
  factory CardinalityVisitorImpl.withDefault({
    R Function(BuilderFieldInfo other)? dflt,
    R Function(BuilderMapFieldInfo<T> map)? map,
    R Function(RepeatedFieldInfo<T> repeated)? repeated,
    R Function(SingleFieldInfo<T> single)? single,
    R Function(OneOfFieldInfo<T> oneof)? oneof,
  }) => (dflt ?? Functions.throws1).let((dflt) => CardinalityVisitorImpl(
    map: map ?? dflt,
    repeated: repeated ?? dflt,
    single: single ?? dflt,
    oneof: oneof ?? dflt,
  ));
}
extension CardinalityVisiteeX<T> on CardinalityVisitee<T> {
  R acceptCardinalityVisitorImpl<R>({
    required R Function(BuilderMapFieldInfo<T> map) map,
    required R Function(RepeatedFieldInfo<T> repeated) repeated,
    required R Function(SingleFieldInfo<T> single) single,
    required R Function(OneOfFieldInfo<T> oneof) oneof,
  }) => acceptCardinality(CardinalityVisitorImpl(map: map,repeated: repeated,single: single,oneof: oneof,));
  R acceptCardinalityWithDefault<R>({
    R Function(BuilderFieldInfo other)? dflt,
    R Function(BuilderMapFieldInfo<T> map)? map,
    R Function(RepeatedFieldInfo<T> repeated)? repeated,
    R Function(SingleFieldInfo<T> single)? single,
    R Function(OneOfFieldInfo<T> oneof)? oneof,
  }) => acceptCardinality(CardinalityVisitorImpl.withDefault(dflt: dflt, map: map,repeated: repeated,single: single,oneof: oneof,));
}
abstract class CardinalityVisiteeBuilderMapFieldInfo<T> implements CardinalityVisitee<T>, Self<BuilderMapFieldInfo<T>> {
  R acceptCardinality<R>(CardinalityVisitor<R, T> visitor) => visitor.builderMapFieldInfo(self);
}
class CardinalityWrapBuilderMapFieldInfo<T> with CardinalityVisiteeBuilderMapFieldInfo<T> {
  final BuilderMapFieldInfo<T> self;
  CardinalityWrapBuilderMapFieldInfo.of(this.self);
}
extension CardinalityWrapBuilderMapFieldInfoX<T> on BuilderMapFieldInfo<T> {
  CardinalityWrapBuilderMapFieldInfo<T> get cardinalityWrap => CardinalityWrapBuilderMapFieldInfo.of(this);
}
abstract class CardinalityVisiteeRepeatedFieldInfo<T> implements CardinalityVisitee<T>, Self<RepeatedFieldInfo<T>> {
  R acceptCardinality<R>(CardinalityVisitor<R, T> visitor) => visitor.repeatedFieldInfo(self);
}
class CardinalityWrapRepeatedFieldInfo<T> with CardinalityVisiteeRepeatedFieldInfo<T> {
  final RepeatedFieldInfo<T> self;
  CardinalityWrapRepeatedFieldInfo.of(this.self);
}
extension CardinalityWrapRepeatedFieldInfoX<T> on RepeatedFieldInfo<T> {
  CardinalityWrapRepeatedFieldInfo<T> get cardinalityWrap => CardinalityWrapRepeatedFieldInfo.of(this);
}
abstract class CardinalityVisiteeSingleFieldInfo<T> implements CardinalityVisitee<T>, Self<SingleFieldInfo<T>> {
  R acceptCardinality<R>(CardinalityVisitor<R, T> visitor) => visitor.singleFieldInfo(self);
}
class CardinalityWrapSingleFieldInfo<T> with CardinalityVisiteeSingleFieldInfo<T> {
  final SingleFieldInfo<T> self;
  CardinalityWrapSingleFieldInfo.of(this.self);
}
extension CardinalityWrapSingleFieldInfoX<T> on SingleFieldInfo<T> {
  CardinalityWrapSingleFieldInfo<T> get cardinalityWrap => CardinalityWrapSingleFieldInfo.of(this);
}
abstract class CardinalityVisiteeOneOfFieldInfo<T> implements CardinalityVisitee<T>, Self<OneOfFieldInfo<T>> {
  R acceptCardinality<R>(CardinalityVisitor<R, T> visitor) => visitor.oneOfFieldInfo(self);
}
class CardinalityWrapOneOfFieldInfo<T> with CardinalityVisiteeOneOfFieldInfo<T> {
  final OneOfFieldInfo<T> self;
  CardinalityWrapOneOfFieldInfo.of(this.self);
}
extension CardinalityWrapOneOfFieldInfoX<T> on OneOfFieldInfo<T> {
  CardinalityWrapOneOfFieldInfo<T> get cardinalityWrap => CardinalityWrapOneOfFieldInfo.of(this);
}
abstract class BoolTypeVisitor<R> {
  R boolType(BoolType boolType);
}
abstract class StringTypeVisitor<R> {
  R stringType(StringType stringType);
}
abstract class EnumTypeVisitor<R> {
  R enumType(EnumType enumType);
}
abstract class MessageTypeVisitor<R> {
  R messageType(MessageType messageType);
}
abstract class IntTypeVisitor<R> {
  R intType(IntType intType);
}
abstract class ValueTypeVisitor<R> implements BoolTypeVisitor<R>, StringTypeVisitor<R>, EnumTypeVisitor<R>, MessageTypeVisitor<R>, IntTypeVisitor<R> {}
abstract class ValueTypeVisitee {
  R acceptValueType<R>(ValueTypeVisitor<R> visitor);
}
class ValueTypeVisitorImpl<R> implements ValueTypeVisitor<R> {
  final R Function(BoolType boolType) _boolType;
  final R Function(StringType stringType) _stringType;
  final R Function(EnumType enumType) _enumType;
  final R Function(MessageType messageType) _messageType;
  final R Function(IntType intType) _intType;
  const ValueTypeVisitorImpl({
    required R Function(BoolType boolType) boolType,
    required R Function(StringType stringType) stringType,
    required R Function(EnumType enumType) enumType,
    required R Function(MessageType messageType) messageType,
    required R Function(IntType intType) intType,
  }) : _boolType = boolType, _stringType = stringType, _enumType = enumType, _messageType = messageType, _intType = intType;
  @override
  R boolType(BoolType boolType) => _boolType(boolType);
  @override
  R stringType(StringType stringType) => _stringType(stringType);
  @override
  R enumType(EnumType enumType) => _enumType(enumType);
  @override
  R messageType(MessageType messageType) => _messageType(messageType);
  @override
  R intType(IntType intType) => _intType(intType);
  factory ValueTypeVisitorImpl.withDefault({
    R Function(ValueType other)? dflt,
    R Function(BoolType boolType)? boolType,
    R Function(StringType stringType)? stringType,
    R Function(EnumType enumType)? enumType,
    R Function(MessageType messageType)? messageType,
    R Function(IntType intType)? intType,
  }) => (dflt ?? Functions.throws1).let((dflt) => ValueTypeVisitorImpl(
    boolType: boolType ?? dflt,
    stringType: stringType ?? dflt,
    enumType: enumType ?? dflt,
    messageType: messageType ?? dflt,
    intType: intType ?? dflt,
  ));
}
extension ValueTypeVisiteeX on ValueTypeVisitee {
  R acceptValueTypeVisitorImpl<R>({
    required R Function(BoolType boolType) boolType,
    required R Function(StringType stringType) stringType,
    required R Function(EnumType enumType) enumType,
    required R Function(MessageType messageType) messageType,
    required R Function(IntType intType) intType,
  }) => acceptValueType(ValueTypeVisitorImpl(boolType: boolType,stringType: stringType,enumType: enumType,messageType: messageType,intType: intType,));
  R acceptValueTypeWithDefault<R>({
    R Function(ValueType other)? dflt,
    R Function(BoolType boolType)? boolType,
    R Function(StringType stringType)? stringType,
    R Function(EnumType enumType)? enumType,
    R Function(MessageType messageType)? messageType,
    R Function(IntType intType)? intType,
  }) => acceptValueType(ValueTypeVisitorImpl.withDefault(dflt: dflt, boolType: boolType,stringType: stringType,enumType: enumType,messageType: messageType,intType: intType,));
}
abstract class ValueTypeVisiteeBoolType implements ValueTypeVisitee, Self<BoolType> {
  R acceptValueType<R>(ValueTypeVisitor<R> visitor) => visitor.boolType(self);
}
class ValueTypeWrapBoolType with ValueTypeVisiteeBoolType {
  final BoolType self;
  ValueTypeWrapBoolType.of(this.self);
}
extension ValueTypeWrapBoolTypeX on BoolType {
  ValueTypeWrapBoolType get valueTypeWrap => ValueTypeWrapBoolType.of(this);
}
abstract class ValueTypeVisiteeStringType implements ValueTypeVisitee, Self<StringType> {
  R acceptValueType<R>(ValueTypeVisitor<R> visitor) => visitor.stringType(self);
}
class ValueTypeWrapStringType with ValueTypeVisiteeStringType {
  final StringType self;
  ValueTypeWrapStringType.of(this.self);
}
extension ValueTypeWrapStringTypeX on StringType {
  ValueTypeWrapStringType get valueTypeWrap => ValueTypeWrapStringType.of(this);
}
abstract class ValueTypeVisiteeEnumType implements ValueTypeVisitee, Self<EnumType> {
  R acceptValueType<R>(ValueTypeVisitor<R> visitor) => visitor.enumType(self);
}
class ValueTypeWrapEnumType with ValueTypeVisiteeEnumType {
  final EnumType self;
  ValueTypeWrapEnumType.of(this.self);
}
extension ValueTypeWrapEnumTypeX on EnumType {
  ValueTypeWrapEnumType get valueTypeWrap => ValueTypeWrapEnumType.of(this);
}
abstract class ValueTypeVisiteeMessageType implements ValueTypeVisitee, Self<MessageType> {
  R acceptValueType<R>(ValueTypeVisitor<R> visitor) => visitor.messageType(self);
}
class ValueTypeWrapMessageType with ValueTypeVisiteeMessageType {
  final MessageType self;
  ValueTypeWrapMessageType.of(this.self);
}
extension ValueTypeWrapMessageTypeX on MessageType {
  ValueTypeWrapMessageType get valueTypeWrap => ValueTypeWrapMessageType.of(this);
}
abstract class ValueTypeVisiteeIntType implements ValueTypeVisitee, Self<IntType> {
  R acceptValueType<R>(ValueTypeVisitor<R> visitor) => visitor.intType(self);
}
class ValueTypeWrapIntType with ValueTypeVisiteeIntType {
  final IntType self;
  ValueTypeWrapIntType.of(this.self);
}
extension ValueTypeWrapIntTypeX on IntType {
  ValueTypeWrapIntType get valueTypeWrap => ValueTypeWrapIntType.of(this);
}